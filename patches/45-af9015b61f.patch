commit af9015b61f637487d34d740010282c5e5eca9832
Author: Kevin Dangoor <kid@blazingthings.com>
Date:   Thu Nov 11 22:27:41 2010 -0500

    added some notes about the plugin system

diff --git a/Skywriter10.md b/Skywriter10.md
index cfd7e90..239d17e 100644
--- a/Skywriter10.md
+++ b/Skywriter10.md
@@ -58,3 +58,39 @@ Once Ajax.org is ready to move over to the updated-with-new-plugin-system ACE,
 the submodule in Skywriter will change to point to the authoritative ACE
 repository.
 
+## Plugin System ##
+
+Bespin 0.9 is built around and driven by a plugin system. ACE has a tiny bit
+of a plugin capability. The plan for Skywriter 1.0 is to be plugin-driven but
+to have a far simpler plugin model.
+
+When Bespin's plugins were introduced, we did so with the thought that we 
+would have a Bespin server potentially with a great many plugins. In order to
+make load times reasonable, we would lazy load plugins on demand as much as
+was possible. In order to make lazy loading possible, plugins needed to have
+a bunch of metadata that described what they offered to the system. As an
+example of this, if you made a command to reformat a document when you press
+ctrl-K, that plugin would not be sent along to the client until the user
+actually presses ctrl-K.
+
+That lazy loading made the plugin system and the plugins themselves more
+complex and less JavaScripty.
+
+Skywriter throws out the lazy loading requirement, though we may bring it
+back in limited cases in the future for things like syntax highlighters.
+This simplifies the plugin system and many plugins.
+
+As with Bespin 0.9, plugins are [CommonJS packages](http://wiki.commonjs.org/wiki/Packages/1.0).
+However, the notion of "extension points" that was so important in Bespin 0.9
+is being replaced by the more common idiom of calling registration functions
+to tell the editor about new functionality. The common extension points from
+Bespin 0.9 will have a straightforward conversion to a registration function
+call.
+
+The plugin's main module (generally called "index.js") can have functions
+defined on it that are called at various points in the plugin's lifecycle.
+The function names and the plugin lifecycle are the same as defined in
+Firefox's [Bootstrapped Extensions](https://developer.mozilla.org/en/Extensions/Bootstrapped_extensions).
+There is no relationship between Skywriter plugins and Firefox extensions, but
+the interface described on that page matches exactly what we need.
+
