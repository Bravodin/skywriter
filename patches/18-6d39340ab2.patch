commit 6d39340ab2d25f43cf861c11992d90b92a284bb6
Author: Kevin Dangoor <kid@blazingthings.com>
Date:   Wed Oct 27 22:06:07 2010 -0400

    add rangeutils and edit_session plugins

diff --git a/plugins/edit_session/lib/index.js b/plugins/edit_session/lib/index.js
new file mode 100644
index 0000000..8d23780
--- /dev/null
+++ b/plugins/edit_session/lib/index.js
@@ -0,0 +1,132 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Skywriter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Kevin Dangoor (kdangoor@mozilla.com)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+define(function(require, exports, module) {
+    
+exports.init = function() {
+};
+
+exports.deinit = function() {
+};
+
+var Promise = require('promise').Promise;
+
+var Event = require('events').Event;
+
+exports.EditSession = function() { };
+
+exports.EditSession.prototype = {
+    /**
+     * @property{TextView}
+     *
+     * The 'current' view is the editor component that most recently had
+     * the focus.
+     */
+    _currentView: null,
+
+
+    /**
+     * @type{string}
+     * The name of the user, or null if no user is logged in.
+     */
+    currentUser: null,
+
+    /**
+     * The history object to store file history in.
+     */
+    history: null,
+
+    /**
+     * figures out the full path, taking into account the current file
+     * being edited.
+     */
+    getCompletePath: function(path) {
+        if (path == null) {
+            path = '';
+        }
+
+        if (path == null || path.substring(0, 1) != '/') {
+            var buffer;
+            if (this._currentView && this._currentView.buffer) {
+                buffer = this._currentView.buffer;
+            }
+            var file;
+            if (buffer) {
+                file = buffer.file;
+            }
+            if (!file) {
+                path = '/' + path;
+            } else {
+                path = file.parentdir() + path;
+            }
+        }
+
+        return path;
+    }
+};
+
+Object.defineProperties(exports.EditSession.prototype, {
+    currentView: {
+        set: function(newView) {
+            var oldView = this._currentView;
+            if (newView !== oldView) {
+                this._currentView = newView;
+            }
+        },
+        
+        get: function() {
+            return this._currentView;
+        }
+    }
+});
+
+/*
+ * set up a session based on a view. This seems a bit convoluted and is
+ * likely to change.
+ */
+exports.createSession = function(view, user) {
+    var session = new exports.EditSession();
+    if (view) {
+        session.currentView = view.textView;
+    }
+    if (user) {
+        session.currentUser = user;
+    }
+    return session;
+};
+
+});
diff --git a/plugins/edit_session/package.json b/plugins/edit_session/package.json
new file mode 100644
index 0000000..da7470d
--- /dev/null
+++ b/plugins/edit_session/package.json
@@ -0,0 +1,5 @@
+{
+    "description":
+        "Ties together the files being edited with the views on screen",
+    "dependencies": { "events": "0.0.0" }
+}
\ No newline at end of file
diff --git a/plugins/edit_session/tests/testSession.js b/plugins/edit_session/tests/testSession.js
new file mode 100644
index 0000000..4ec9ccc
--- /dev/null
+++ b/plugins/edit_session/tests/testSession.js
@@ -0,0 +1,141 @@
+require.def(['require', 'exports', 'module',
+    'edit_session/tests/plugindev',
+    'filesystem/tests/fixture',
+    'edit_session/tests/filesystem',
+    'edit_session/tests/edit_session',
+    'skywriter/promise'
+], function(require, exports, module,
+    t,
+    fixture,
+    fs,
+    editsession,
+    promise
+) {
+
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Skywriter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Skywriter Team (skywriter@mozilla.com)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+
+var DummyFileSource = fixture.DummyFileSource;
+
+
+var Promise = promise.Promise;
+
+var source = new DummyFileSource([
+    {name: 'atTheTop.js', contents: 'the top file'},
+    {name: 'anotherAtTheTop.js', contents: 'another file'},
+    {name: 'foo/'},
+    {name: 'deeply/nested/directory/andAFile.txt', contents: 'text file'}
+]);
+
+exports.testBufferFileChange = function() {
+    var root = fs.Filesystem.create({
+        source: source
+    });
+    var buffer = editsession.Buffer.create();
+    t.ok(buffer.get('model') != null,
+        'Model should be set to a TextStorage by default');
+    t.ok(buffer.untitled(), 'Buffer should initially be untitled');
+    var f = root.getFile('atTheTop.js');
+    buffer.changeFileOnly(f);
+    t.ok(!buffer.untitled(), 'Buffer should no longer be untitled');
+    t.equal('', buffer.get('model').getValue(), 'Should be empty now');
+    buffer.changeFileOnly(null);
+    t.ok(buffer.untitled(), 'Buffer should be untitled again');
+    buffer.set('file', f);
+    var pr = new Promise();
+    setTimeout(function() {
+        var newtext = buffer.get('model').getValue();
+        t.equal(newtext, 'the top file', 'Expected file contents to be loaded');
+
+        // now we want to reset the buffer.
+        buffer.changeFile(null);
+        t.ok(buffer.untitled(), 'Buffer should be untitled again');
+        newtext = buffer.get('model').getValue();
+        t.equal(newtext, '', 'editor text should be empty');
+        pr.resolve();
+    }, 1);
+    return pr;
+};
+
+exports.testBufferFileChangeWithCallback = function() {
+    var root = fs.Filesystem.create({
+        source: source
+    });
+    var buffer = editsession.Buffer.create();
+    var f = root.getFile('atTheTop.js');
+    var pr = buffer.changeFile(f);
+    var testpr = pr.then(function(b) {
+        t.equal(b, buffer, 'should have gotten the buffer object in');
+        t.equal(b.get('model').getValue(), 'the top file', 'contents should be loaded');
+        if (testpr != undefined) {
+            testpr.resolve();
+        }
+    });
+    return testpr;
+};
+
+exports.testBufferSaving = function() {
+    source.reset();
+    var testpr = new Promise();
+    var root = fs.Filesystem.create({ source: source });
+    var buffer = editsession.Buffer.create();
+    var model = buffer.get('model');
+    model.setValue('foobar');
+    t.equal(model.getValue(), 'foobar', 'the value stored in ' +
+        'the model and the string that was just written to it');
+
+    var file1 = root.getFile('bar.txt');
+    file1.exists().then(function(exists) {
+        t.ok(!exists, 'file should not be there now');
+        buffer.saveAs(file1).then(function() {
+            var request = source.requests.pop();
+            t.equal(request[0], 'saveContents');
+            t.equal(request[1][0], 'bar.txt');
+            t.equal(request[1][1], 'foobar');
+
+            file1.exists().then(function(exists) {
+                t.ok(exists, 'file should now exist');
+                testpr.resolve();
+            });
+        });
+    });
+
+    return testpr;
+};
+
+});
diff --git a/plugins/rangeutils/lib/index.js b/plugins/rangeutils/lib/index.js
new file mode 100644
index 0000000..b4714f7
--- /dev/null
+++ b/plugins/rangeutils/lib/index.js
@@ -0,0 +1,185 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Skywriter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Patrick Walton (pwalton@mozilla.com)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+define(function(require, exports, module) {
+
+var util = require("util/util");
+
+/**
+ * Returns the result of adding the two positions.
+ */
+exports.addPositions = function(a, b) {
+    return { row: a.row + b.row, col: a.col + b.col };
+};
+
+/** Returns a copy of the given range. */
+exports.cloneRange = function(range) {
+    var oldStart = range.start, oldEnd = range.end;
+    var newStart = { row: oldStart.row, col: oldStart.col };
+    var newEnd = { row: oldEnd.row, col: oldEnd.col };
+    return { start: newStart, end: newEnd };
+};
+
+/**
+ * Given two positions a and b, returns a negative number if a < b, 0 if a = b,
+ * or a positive number if a > b.
+ */
+exports.comparePositions = function(positionA, positionB) {
+    var rowDiff = positionA.row - positionB.row;
+    return rowDiff === 0 ? positionA.col - positionB.col : rowDiff;
+};
+
+/**
+ * Returns true if the two ranges are equal and false otherwise.
+ */
+exports.equal = function(rangeA, rangeB) {
+    return (exports.comparePositions(rangeA.start, rangeB.start) === 0 &&
+                exports.comparePositions(rangeA.end, rangeB.end) === 0);
+};
+
+exports.extendRange = function(range, delta) {
+    var end = range.end;
+    return {
+        start: range.start,
+        end:   {
+            row: end.row + delta.row,
+            col: end.col + delta.col
+        }
+    };
+};
+
+/**
+ * Given two sets of ranges, returns the ranges of characters that exist in one
+ * of the sets but not both.
+ */
+exports.intersectRangeSets = function(setA, setB) {
+    var stackA = util.clone(setA), stackB = util.clone(setB);
+    var result = [];
+    while (stackA.length > 0 && stackB.length > 0) {
+        var rangeA = stackA.shift(), rangeB = stackB.shift();
+        var startDiff = exports.comparePositions(rangeA.start, rangeB.start);
+        var endDiff = exports.comparePositions(rangeA.end, rangeB.end);
+
+        if (exports.comparePositions(rangeA.end, rangeB.start) < 0) {
+            // A is completely before B
+            result.push(rangeA);
+            stackB.unshift(rangeB);
+        } else if (exports.comparePositions(rangeB.end, rangeA.start) < 0) {
+            // B is completely before A
+            result.push(rangeB);
+            stackA.unshift(rangeA);
+        } else if (startDiff < 0) {     // A starts before B
+            result.push({ start: rangeA.start, end: rangeB.start });
+            stackA.unshift({ start: rangeB.start, end: rangeA.end });
+            stackB.unshift(rangeB);
+        } else if (startDiff === 0) {   // A and B start at the same place
+            if (endDiff < 0) {          // A ends before B
+                stackB.unshift({ start: rangeA.end, end: rangeB.end });
+            } else if (endDiff > 0) {   // A ends after B
+                stackA.unshift({ start: rangeB.end, end: rangeA.end });
+            }
+        } else if (startDiff > 0) {     // A starts after B
+            result.push({ start: rangeB.start, end: rangeA.start });
+            stackA.unshift(rangeA);
+            stackB.unshift({ start: rangeA.start, end: rangeB.end });
+        }
+    }
+    return result.concat(stackA, stackB);
+};
+
+exports.isZeroLength = function(range) {
+    return range.start.row === range.end.row &&
+        range.start.col === range.end.col;
+};
+
+/**
+ * Returns the greater of the two positions.
+ */
+exports.maxPosition = function(a, b) {
+    return exports.comparePositions(a, b) > 0 ? a : b;
+};
+
+/**
+ * Converts a range with swapped 'end' and 'start' values into one with the
+ * values in the correct order.
+ *
+ * TODO: Unit test.
+ */
+exports.normalizeRange = function(range) {
+    return this.comparePositions(range.start, range.end) < 0 ? range :
+        { start: range.end, end: range.start };
+};
+
+/**
+ * Returns a single range that spans the entire given set of ranges.
+ */
+exports.rangeSetBoundaries = function(rangeSet) {
+    return {
+        start:  rangeSet[0].start,
+        end:    rangeSet[rangeSet.length - 1].end
+    };
+};
+
+exports.toString = function(range) {
+    var start = range.start, end = range.end;
+    return '[ ' + start.row + ', ' + start.col + ' ' + end.row + ',' + + end.col +' ]';
+};
+
+/**
+ * Returns the union of the two ranges.
+ */
+exports.unionRanges = function(a, b) {
+    return {
+        start:  a.start.row < b.start.row ||
+            (a.start.row === b.start.row && a.start.col < b.start.col) ?
+            a.start : b.start,
+        end:    a.end.row > b.end.row ||
+            (a.end.row === b.end.row && a.end.col > b.end.col) ?
+            a.end : b.end
+    };
+};
+
+exports.isPosition = function(pos) {
+    return !util.none(pos) && !util.none(pos.row) && !util.none(pos.col);
+};
+
+exports.isRange = function(range) {
+    return (!util.none(range) && exports.isPosition(range.start) &&
+                                                exports.isPosition(range.end));
+};
+
+});
\ No newline at end of file
diff --git a/plugins/rangeutils/package.json b/plugins/rangeutils/package.json
new file mode 100644
index 0000000..95253dc
--- /dev/null
+++ b/plugins/rangeutils/package.json
@@ -0,0 +1 @@
+{ "description": "Utility functions for dealing with ranges of text" }
\ No newline at end of file
diff --git a/plugins/rangeutils/tests/test.js b/plugins/rangeutils/tests/test.js
new file mode 100644
index 0000000..d96c43a
--- /dev/null
+++ b/plugins/rangeutils/tests/test.js
@@ -0,0 +1,163 @@
+require.def(['require', 'exports', 'module',
+    'rangeutils/tests/plugindev',
+    'rangeutils/tests/utils/range'
+], function(require, exports, module,
+    t,
+    Range
+) {
+
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Skywriter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Skywriter Team (skywriter@mozilla.com)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+
+
+
+exports.testAddPositions = function() {
+    t.deepEqual(Range.addPositions({ row: 0, col: 0 },
+        { row: 0, col: 0 }), { row: 0, col: 0 }, '0,0 + 0,0 and 0,0');
+    t.deepEqual(Range.addPositions({ row: 1, col: 0 },
+        { row: 2, col: 0 }), { row: 3, col: 0 }, '1,0 + 2,0 and 3,0');
+    t.deepEqual(Range.addPositions({ row: 0, col: 1 },
+        { row: 0, col: 1 }), { row: 0, col: 2 }, '0,1 + 0,1 and 0,2');
+    t.deepEqual(Range.addPositions({ row: 1, col: 2 },
+        { row: -1, col: -2 }), { row: 0, col: 0 }, '1,2 + -1,-2 and 0,0');
+};
+
+exports.testCloneRange = function() {
+    var oldRange = { start: { row: 1, col: 2 }, end: { row: 3, col: 4 } };
+    var newRange = Range.cloneRange(oldRange);
+    t.deepEqual(oldRange, newRange, "the old range and the new range");
+    t.ok(oldRange.start !== newRange.start, "the old range's start position " +
+        "is distinct from the new range's start position");
+    t.ok(oldRange.end !== newRange.end, "the old range's end position is " +
+        "distinct from the new range's end position");
+    t.ok(oldRange !== newRange, "the old range is distinct from the new " +
+        "range");
+};
+
+exports.testComparePositions = function() {
+    t.equal(Range.comparePositions({ row: 0, col: 0 },
+        { row: 0, col: 0 }), 0, '0,0 = 0,0');
+    t.ok(Range.comparePositions({ row: 0, col: 0 },
+        { row: 1, col: 0 }) < 0, '0,0 < 1,0');
+    t.ok(Range.comparePositions({ row: 0, col: 0 },
+        { row: 0, col: 1 }) < 0, '0,0 < 0,1');
+    t.ok(Range.comparePositions({ row: 1, col: 0 },
+        { row: 0, col: 0 }) > 0, '1,0 > 0,0');
+    t.ok(Range.comparePositions({ row: 0, col: 1 },
+        { row: 0, col: 0 }) > 0, '0,1 > 0,0');
+};
+
+exports.testExtendRange = function() {
+    t.deepEqual(Range.extendRange({
+            start:  { row: 1, col: 2 },
+            end:    { row: 3, col: 4 }
+        }, { row: 5, col: 6 }), {
+            start:  { row: 1, col: 2 },
+            end:    { row: 8, col: 10 }
+        }, '[ 1,2 3,4 ] extended by 5,6 = [ 1,2 8,10 ]');
+    t.deepEqual(Range.extendRange({
+            start:  { row: 7, col: 8 },
+            end:    { row: 9, col: 10 }
+        }, { row: 0, col: 0 }), {
+            start:  { row: 7, col: 8 },
+            end:    { row: 9, col: 10 }
+        }, '[ 7,8 9,10 ] extended by 0,0 remains the same');
+};
+
+exports.testMaxPosition = function() {
+    t.deepEqual(Range.maxPosition({ row: 0, col: 0 },
+        { row: 0, col: 0 }), { row: 0, col: 0 }, 'max(0,0 0,0) = 0,0');
+    t.deepEqual(Range.maxPosition({ row: 0, col: 0 },
+        { row: 1, col: 0 }), { row: 1, col: 0 }, 'max(0,0 1,0) = 1,0');
+    t.deepEqual(Range.maxPosition({ row: 0, col: 0 },
+        { row: 0, col: 1 }), { row: 0, col: 1 }, 'max(0,0 0,1) = 0,1');
+    t.deepEqual(Range.maxPosition({ row: 1, col: 0 },
+        { row: 0, col: 0 }), { row: 1, col: 0 }, 'max(1,0 0,0) = 1,0');
+    t.deepEqual(Range.maxPosition({ row: 0, col: 1 },
+        { row: 0, col: 0 }), { row: 0, col: 1 }, 'max(0,1 0,0) = 0,1');
+};
+
+exports.testNormalizeRange = function() {
+    t.deepEqual(Range.normalizeRange({
+            start:  { row: 0, col: 0 },
+            end:    { row: 0, col: 0 }
+        }), {
+            start:  { row: 0, col: 0 },
+            end:    { row: 0, col: 0 }
+        }, 'normalize(0,0 0,0) and (0,0 0,0)');
+    t.deepEqual(Range.normalizeRange({
+            start:  { row: 1, col: 2 },
+            end:    { row: 3, col: 4 }
+        }), {
+            start:  { row: 1, col: 2 },
+            end:    { row: 3, col: 4 }
+        }, 'normalize(1,2 3,4) and (1,2 3,4)');
+    t.deepEqual(Range.normalizeRange({
+            start:  { row: 4, col: 3 },
+            end:    { row: 2, col: 1 }
+        }), {
+            start:  { row: 2, col: 1 },
+            end:    { row: 4, col: 3 }
+        }, 'normalize(4,3 2,1) and (2,1 4,3)');
+};
+
+exports.testUnionRanges = function() {
+    t.deepEqual(Range.unionRanges({
+            start:  { row: 1, col: 2 },
+            end:    { row: 3, col: 4 }
+        }, {
+            start:  { row: 5, col: 6 },
+            end:    { row: 7, col: 8 }
+        }), {
+            start:  { row: 1, col: 2 },
+            end:    { row: 7, col: 8 }
+        }, '[ 1,2 3,4 ] union [ 5,6 7,8 ] = [ 1,2 7,8 ]');
+    t.deepEqual(Range.unionRanges({
+            start:  { row: 4, col: 4 },
+            end:    { row: 5, col: 5 }
+        }, {
+            start:  { row: 3, col: 3 },
+            end:    { row: 4, col: 5 }
+        }), {
+            start:  { row: 3, col: 3 },
+            end:    { row: 5, col: 5 }
+        }, '[ 4,4 5,5 ] union [ 3,3 4,5 ] = [ 3,3 5,5 ]');
+};
+
+
+});
diff --git a/scripts/boot.js b/scripts/boot.js
index 0741762..0874369 100644
--- a/scripts/boot.js
+++ b/scripts/boot.js
@@ -37,7 +37,8 @@
 
 
 require.ready(function() {
-    var knownPlugins = ["util", "events", "types", "settings", "canon"];
+    var knownPlugins = ["util", "rangeutils", "events", "types", "settings", "canon",
+                        "edit_session"];
     
     var pluginPackageInfo = [
         {
