commit 5d19bb4b76584654e5e5d7640efa731bfdedc7df
Author: Kevin Dangoor <kid@blazingthings.com>
Date:   Wed Nov 3 22:15:25 2010 -0400

    plugin style based on the ideas here:
    
        https://developer.mozilla.org/en/Extensions/Bootstrapped_extensions

diff --git a/plugins/canon/lib/index.js b/plugins/canon/lib/index.js
index 86175ff..175c3ea 100644
--- a/plugins/canon/lib/index.js
+++ b/plugins/canon/lib/index.js
@@ -39,7 +39,7 @@ define(function(require, exports, module) {
 
 var settings = require('settings');
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     // TODO register these using new registration functionality
     
     // catalog.addExtensionPoint("command", {
@@ -63,7 +63,7 @@ exports.init = function() {
     });
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
     settings.removeSetting('historyLength');
 };
 
diff --git a/plugins/edit_session/lib/index.js b/plugins/edit_session/lib/index.js
index 2fa0ac5..c3bc017 100644
--- a/plugins/edit_session/lib/index.js
+++ b/plugins/edit_session/lib/index.js
@@ -37,10 +37,10 @@
 
 define(function(require, exports, module) {
     
-exports.init = function() {
+exports.startup = function(data, reason) {
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
 };
 
 var Promise = require('util/promise').Promise;
diff --git a/plugins/environment.js b/plugins/environment.js
index 16dc626..1e11651 100644
--- a/plugins/environment.js
+++ b/plugins/environment.js
@@ -42,21 +42,13 @@ define(function(require, exports, module) {
     
 var util = require("util/util");
 var console = require('util/console');
-var settingsMod = require('settings');
+var Event = require('events').Event;
+var Promise = require('util/promise').Promise;
 
 "define metadata";
-({ "dependencies": { "settings": "0.0.0" } });
+({});
 "end";
 
-exports.init = function() {
-};
-
-exports.destroy = function() {
-};
-
-
-var settings = settingsMod.settings;
-
 /**
  * The environment plays a similar role to the environment under unix.
  * Skywriter does not currently have a concept of variables, (i.e. things the user
@@ -64,56 +56,58 @@ var settings = settingsMod.settings;
  * are changed by the system.
  * <p>The role of the Environment is likely to be expanded over time.
  */
-exports.Environment = function() {
-    // The current command line pushes this value into here
-    this.commandLine = null;
-
+exports.Environment = function(predefined) {
+    this.dimensionsChanged = new Event();
+    this._readyCallbacks = new Event();
+    this._waitingForDependencies = 0;
+    
     // Fire the sizeChanged event when the window is resized.
     window.addEventListener('resize', this.dimensionsChanged.bind(this), false);
+    
+    for (var key in Object.keys(predefined)) {
+        this[key] = predefined[key];
+    }
+    
+    var self = this;
+    
+    var dependencyLoaded = function() {
+        self._waitingForDependencies--;
+        if (self._waitingForDependencies < 1) {
+            self._readyCallbacks();
+            delete self._readyCallbacks;
+        }
+    };
+    
+    if (!this.settings) {
+        this._waitingForDependencies++;
+        require(['settings'], function(settings) {
+            self.settings = settings.settings;
+            dependencyLoaded();
+        });
+    }
+    
+    if (!this.session) {
+        this._waitingForDependencies++;
+        require(['edit_session'], function(edit_session) {
+            self.session = new edit_session.EditSession();
+            dependencyLoaded();
+        });
+    }
 };
 
 Object.defineProperties(exports.Environment.prototype, {
-
     /**
-     * Provides a get() and set() function to set and get settings.
+     * calls a function when the environment is ready.
+     * The function is called immediately if the environment is ready.
      */
-    settings: {
-        value: {
-            set: function(key, value) {
-                if (util.none(key)) {
-                    throw new Error('setSetting(): key must be supplied');
-                }
-                if (util.none(value)) {
-                    throw new Error('setSetting(): value must be supplied');
-                }
-
-                settings.set(key, value);
-            },
-            
-            get: function(key) {
-                if (util.none(key)) {
-                    throw new Error('getSetting(): key must be supplied');
-                }
-                return settings.get(key);
-            }
+    ready: function(callback) {
+        if (this._waitingForDependencies) {
+            this._readyCallbacks.add(callback);
+        } else {
+            callback();
         }
     },
-
-    dimensionsChanged: {
-        value: function() {
-            catalog.publish(this, 'dimensionsChanged');
-        }
-    },
-
-    /**
-     * Retrieves the EditSession
-     */
-    session: {
-        get: function() {
-            return catalog.getObject('session');
-        }
-    },
-
+    
     /**
      * Gets the currentView from the session.
      */
@@ -211,6 +205,6 @@ Object.defineProperties(exports.Environment.prototype, {
 /**
  * The global environment used throughout this Skywriter instance.
  */
-exports.env = new exports.Environment();
+exports.env = new exports.Environment({});
 
 });
diff --git a/plugins/events/lib/index.js b/plugins/events/lib/index.js
index 30e5ba0..8466e97 100644
--- a/plugins/events/lib/index.js
+++ b/plugins/events/lib/index.js
@@ -38,10 +38,10 @@
 
 define(function(require, exports, module) {
     
-exports.init = function() {
+exports.startup = function(data, reason) {
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
 };
 
 exports.Event = function(opts) {
diff --git a/plugins/keyboard/lib/index.js b/plugins/keyboard/lib/index.js
index b520020..b65406c 100644
--- a/plugins/keyboard/lib/index.js
+++ b/plugins/keyboard/lib/index.js
@@ -55,7 +55,7 @@ exports.removeKeymapping = function(name) {
     delete exports.keymapping[name];
 };
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     // TODO register this
     // catalog.addExtensionPoint("keymapping", {
     //     "description": "A keymapping defines how keystrokes are interpreted.",
@@ -76,7 +76,7 @@ exports.init = function() {
     });
 };
 
-exports.destroy = function() {
+exports.shutdown = function(data, reason) {
     settings.settingChange.remove(exports.keyboardManager);
 };
 
diff --git a/plugins/plugins/lib/index.js b/plugins/plugins/lib/index.js
index 1b0eeab..efa792c 100644
--- a/plugins/plugins/lib/index.js
+++ b/plugins/plugins/lib/index.js
@@ -39,26 +39,71 @@ define(function(require, exports, module) {
 
 var Promise = require("util/promise").Promise;
 
+exports.REASONS = {
+    APP_STARTUP: 1,
+    APP_SHUTDOWN: 2,
+    PLUGIN_ENABLE: 3,
+    PLUGIN_DISABLE: 4,
+    PLUGIN_INSTALL: 5,
+    PLUGIN_UNINSTALL: 6,
+    PLUGIN_UPGRADE: 7,
+    PLUGIN_DOWNGRADE: 8
+};
+
 exports.Plugin = function(name) {
     this.name = name;
-    this.initialized = false;
+    this.status = this.INSTALLED;
 };
 
 exports.Plugin.prototype = {
-    initialize: function() {
+    /**
+     * constants for the state
+     */
+    NEW: 0,
+    INSTALLED: 1,
+    STARTED: 2,
+    SHUTDOWN: 3,
+    
+    install: function(data, reason) {
+        var pr = new Promise();
+        if (this.status > this.NEW) {
+            pr.resolve(this);
+            return pr;
+        }
+        require([this.name], function(pluginModule) {
+            if (pluginModule.install) {
+                pluginModule.install(data, reason);
+            }
+            this.status = this.INSTALLED;
+            pr.resolve(this);
+        }.bind(this));
+        return pr;
+    },
+    
+    startup: function(data, reason) {
         var pr = new Promise();
-        if (this.initialized) {
+        if (this.status != this.INSTALLED) {
             pr.resolve(this);
             return pr;
         }
         require([this.name], function(pluginModule) {
-            if (pluginModule.init) {
-                pluginModule.init();
+            if (pluginModule.startup) {
+                pluginModule.startup(data, reason);
             }
-            this.initialized = true;
+            this.status = this.STARTED;
             pr.resolve(this);
         }.bind(this));
         return pr;
+    },
+    
+    shutdown: function(data, reason) {
+        if (this.status != this.STARTED) {
+            return;
+        }
+        pluginModule = require(this.name);
+        if (pluginModule.shutdown) {
+            pluginModule.shutdown(data, reason);
+        }
     }
 };
 
@@ -67,20 +112,24 @@ exports.PluginCatalog = function() {
 };
 
 exports.PluginCatalog.prototype = {
-    initializePlugins: function(pluginList) {
-        var initializationPromises = [];
+    registerPlugins: function(pluginList) {
         pluginList.forEach(function(pluginName) {
             var plugin = this.plugins[pluginName];
             if (plugin === undefined) {
                 plugin = new exports.Plugin(pluginName);
                 this.plugins[pluginName] = plugin;
             }
-            initializationPromises.push(plugin.initialize());
         }.bind(this));
-        return Promise.group(initializationPromises);
+    },
+    
+    startupPlugins: function(data, reason) {
+        var startupPromises = [];
+        for (var pluginName in this.plugins) {
+            var plugin = this.plugins[pluginName];
+            startupPromises.push(plugin.startup(data, reason));
+        }
+        return Promise.group(startupPromises);
     }
 };
 
-exports.catalog = new exports.PluginCatalog();
-
 });
diff --git a/plugins/settings/lib/index.js b/plugins/settings/lib/index.js
index 114407a..9b84050 100644
--- a/plugins/settings/lib/index.js
+++ b/plugins/settings/lib/index.js
@@ -102,7 +102,7 @@ var console = require("util/console");
 var types = require("types");
 var Event = require("events").Event;
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     // TODO add extension point in new style
     // catalog.addExtensionPoint("setting", {
     //     "description":
@@ -158,7 +158,7 @@ exports.init = function() {
     // });
 };
 
-exports.destroy = function() {
+exports.shutdown = function(data, reason) {
 };
 
 var settings = {};
diff --git a/plugins/syntax_directory.js b/plugins/syntax_directory.js
index 3a00ead..47a0c5c 100644
--- a/plugins/syntax_directory.js
+++ b/plugins/syntax_directory.js
@@ -45,10 +45,10 @@ define(function(require, exports, module) {
 });
 "end";
 
-exports.init = function() {
+exports.startup = function(data, reason) {
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
 };
 
 
diff --git a/plugins/syntax_manager/lib/index.js b/plugins/syntax_manager/lib/index.js
index aa4449c..8eaf84f 100644
--- a/plugins/syntax_manager/lib/index.js
+++ b/plugins/syntax_manager/lib/index.js
@@ -44,10 +44,10 @@ var syntaxDirectory = require('syntax_directory').syntaxDirectory;
 var rangeutils = require('rangeutils');
 var console = require('util/console');
 
-exports.init = function() {
+exports.startup = function(data, reason) {
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
 };
 
 // The number of lines to highlight at once.
diff --git a/plugins/types/lib/index.js b/plugins/types/lib/index.js
index 93bd89f..e0dcb5d 100644
--- a/plugins/types/lib/index.js
+++ b/plugins/types/lib/index.js
@@ -89,7 +89,7 @@ exports.isValid = function(originalVersion, typeSpec) {
     return typeData.type.isValid(originalVersion, typeSpec);
 };
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     // TODO: register this extension point.
     
     // catalog.addExtensionPoint("type", {
diff --git a/plugins/undomanager/lib/index.js b/plugins/undomanager/lib/index.js
index ad07b71..de17357 100644
--- a/plugins/undomanager/lib/index.js
+++ b/plugins/undomanager/lib/index.js
@@ -40,7 +40,7 @@ define(function(require, exports, module) {
 var util = require("util/util");
 var canon = require('canon');
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     canon.addCommand({
         "name": "redo",
         "key": [ "ctrl_shift_z" ],
@@ -53,7 +53,7 @@ exports.init = function() {
     });
 };
 
-exports.deinit = function() {
+exports.shutdown = function(data, reason) {
     canon.removeCommand('redo');
     canon.removeCommand('undo');
 };
diff --git a/plugins/util/lib/index.js b/plugins/util/lib/index.js
index a6dd99e..995afb8 100644
--- a/plugins/util/lib/index.js
+++ b/plugins/util/lib/index.js
@@ -37,7 +37,7 @@
 
 define(function(require, exports, module) {
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     // Narwhal's shim for ES5 defineProperty
     // ES5 15.2.3.6
     if (!Object.defineProperty) {
diff --git a/plugins/worker_manager.js b/plugins/worker_manager.js
index b8bef70..d02827b 100644
--- a/plugins/worker_manager.js
+++ b/plugins/worker_manager.js
@@ -56,7 +56,7 @@ var Promise = require('util/promise').Promise;
 var proxy = require('util/proxy');
 var console = require('util/console');
 
-exports.init = function() {
+exports.startup = function(data, reason) {
     canon.addCommand({
         "name": "worker",
         "description": "Low-level web worker control (for plugin development)"
@@ -68,7 +68,7 @@ exports.init = function() {
     });
 };
 
-exports.destroy = function() {
+exports.shutdown = function(data, reason) {
     canon.removeCommand("worker restart");
     canon.removeCommand("worker");
 };
diff --git a/scripts/boot.js b/scripts/boot.js
index d1b721b..39f2956 100644
--- a/scripts/boot.js
+++ b/scripts/boot.js
@@ -36,7 +36,7 @@
  * ***** END LICENSE BLOCK ***** */
 
 // TODO: Yuck! A global function
-var setupPlugins = function(config) {
+var setupPlugins = function(config, callback) {
     config = config || {};
     if (!config.pluginDirs) {
         config.pluginDirs = {};
@@ -98,26 +98,10 @@ var setupPlugins = function(config) {
     });
     require(["plugins"], function() {
         var pluginsModule = require("plugins");
-        pluginsModule.catalog.initializePlugins(knownPlugins).then(function() {
-            var console = require('util/console');
-            console.log('initialized!');
-            
-            // try some stuff out. TODO delete this
-            var newSetting = {
-                name: "allGood",
-                defaultValue: false,
-                type: "boolean"
-            };
-            
-            var settings = require("settings");
-            settings.addSetting(newSetting);
-            settings.settings.set("allGood", true);
-            if (!settings.settings.get("allGood")) {
-                alert("it's not all good :(");
-            } else {
-                console.log("all good!");
-            }
-        });
-        
+        var catalog = new pluginsModule.PluginCatalog();
+        catalog.registerPlugins(knownPlugins);
+        if (callback) {
+            callback(catalog);
+        }
     });
 };
diff --git a/test.html b/test.html
index aaaddc0..f87980d 100644
--- a/test.html
+++ b/test.html
@@ -12,7 +12,31 @@
     <script src="scripts/require.js"></script>
     <script src="scripts/boot.js"></script>
     <script>
-      setupPlugins();
+      require.ready(function() {
+        setupPlugins({}, function(catalog) {
+          var pluginsModule = require("plugins");
+          catalog.startupPlugins({}, pluginsModule.REASONS.APP_STARTUP).then(function() {
+              var console = require('util/console');
+              console.log('initialized!');
+
+              // try some stuff out. TODO delete this
+              var newSetting = {
+                  name: "allGood",
+                  defaultValue: false,
+                  type: "boolean"
+              };
+
+              var settings = require("settings");
+              settings.addSetting(newSetting);
+              settings.settings.set("allGood", true);
+              if (!settings.settings.get("allGood")) {
+                  alert("it's not all good :(");
+              } else {
+                  console.log("all good!");
+              }
+          });
+        });
+      });
     </script>
   </body>
 </html>
\ No newline at end of file
diff --git a/thirdparty/underscore.js b/thirdparty/underscore.js
index 919603c..459222d 100644
--- a/thirdparty/underscore.js
+++ b/thirdparty/underscore.js
@@ -15,7 +15,7 @@ define(function(require, exports, module) {
 });
 "end";
 
-exports.init = function() {
+exports.startup = function(data, reason) {
 };
 
 (function() {
