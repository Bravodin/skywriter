commit 521939dab003701378b9fe623f58d1aadba6c770
Author: Kevin Dangoor <kid@blazingthings.com>
Date:   Thu Nov 4 14:28:14 2010 -0400

    changing boot a bit to work with passed-in environment

diff --git a/plugins/canon/lib/index.js b/plugins/canon/lib/index.js
index 175c3ea..d032fbd 100644
--- a/plugins/canon/lib/index.js
+++ b/plugins/canon/lib/index.js
@@ -37,9 +37,8 @@
 
 define(function(require, exports, module) {
 
-var settings = require('settings');
-
 exports.startup = function(data, reason) {
+    var settings = data.env.settings;
     // TODO register these using new registration functionality
     
     // catalog.addExtensionPoint("command", {
@@ -64,20 +63,25 @@ exports.startup = function(data, reason) {
 };
 
 exports.shutdown = function(data, reason) {
+    var settings = data.env.settings;
     settings.removeSetting('historyLength');
 };
 
-exports.commands = {};
-
-exports.addCommand = function(options) {
-    if (!options.name) {
-        throw new Error("All registered commands must have a name");
-    }
-    exports.commands[name] = options;
+exports.Canon = function() {
+    this._commands = {};
 };
 
-exports.removeCommand = function(name) {
-    delete exports.commands[name];
+exports.Canon.prototype = {
+    addCommand: function(options) {
+        if (!options.name) {
+            throw new Error("All registered commands must have a name");
+        }
+        this._commands[name] = options;
+    },
+    
+    removeCommand: function(name) {
+        delete this._commands[name];
+    }
 };
 
 });
\ No newline at end of file
diff --git a/plugins/environment.js b/plugins/environment.js
index 1e11651..c6a70da 100644
--- a/plugins/environment.js
+++ b/plugins/environment.js
@@ -93,6 +93,14 @@ exports.Environment = function(predefined) {
             dependencyLoaded();
         });
     }
+    
+    if (!this.canon) {
+        this._waitingForDependencies++;
+        require(['canon'], function(canon) {
+            self.canon = new canon.Canon();
+            dependencyLoaded();
+        });
+    }
 };
 
 Object.defineProperties(exports.Environment.prototype, {
@@ -100,11 +108,13 @@ Object.defineProperties(exports.Environment.prototype, {
      * calls a function when the environment is ready.
      * The function is called immediately if the environment is ready.
      */
-    ready: function(callback) {
-        if (this._waitingForDependencies) {
-            this._readyCallbacks.add(callback);
-        } else {
-            callback();
+    ready: {
+        value: function(callback) {
+            if (this._waitingForDependencies) {
+                this._readyCallbacks.add(callback);
+            } else {
+                callback();
+            }
         }
     },
     
@@ -202,9 +212,4 @@ Object.defineProperties(exports.Environment.prototype, {
     }
 });
 
-/**
- * The global environment used throughout this Skywriter instance.
- */
-exports.env = new exports.Environment({});
-
 });
diff --git a/plugins/keyboard/lib/index.js b/plugins/keyboard/lib/index.js
index b65406c..65c75b6 100644
--- a/plugins/keyboard/lib/index.js
+++ b/plugins/keyboard/lib/index.js
@@ -39,7 +39,6 @@ define(function(request, exports, module) {
 
 var console = require('util/console');
 var Trace = require('util/stacktrace').Trace;
-var settings = require('settings');
 var keyutil = require('keyboard/keyutil');
 var history = require('canon/history');
 var Request = require('canon/request').Request;
@@ -56,6 +55,7 @@ exports.removeKeymapping = function(name) {
 };
 
 exports.startup = function(data, reason) {
+    var settings = data.env.settings;
     // TODO register this
     // catalog.addExtensionPoint("keymapping", {
     //     "description": "A keymapping defines how keystrokes are interpreted.",
@@ -77,6 +77,7 @@ exports.startup = function(data, reason) {
 };
 
 exports.shutdown = function(data, reason) {
+    var settings = data.env.settings;
     settings.settingChange.remove(exports.keyboardManager);
 };
 
diff --git a/plugins/settings/lib/index.js b/plugins/settings/lib/index.js
index 9b84050..8fd55e7 100644
--- a/plugins/settings/lib/index.js
+++ b/plugins/settings/lib/index.js
@@ -161,39 +161,6 @@ exports.startup = function(data, reason) {
 exports.shutdown = function(data, reason) {
 };
 
-var settings = {};
-
-/**
- * Find and configure the settings object.
- * @see MemorySettings.addSetting()
- */
-exports.addSetting = function(settingExt) {
-    settings[settingExt.name] = settingExt;
-    exports.settings.addSetting(settingExt);
-};
-
-/**
- * Fetch an array of the currently known settings
- */
-exports.getSettingNames = function() {
-    return Object.keys(settings);
-};
-
-exports.removeSetting = function(name) {
-    delete settings[name];
-};
-
-exports.getSetting = function(name) {
-    return settings[name];
-};
-
-/**
- * Event that tells people when a setting has changed.
- */
-exports.settingChange = new Event({
-    keyElement: 0
-});
-
 
 /**
  * Something of a hack to allow the set command to give a clearer definition
@@ -254,6 +221,16 @@ exports.MemorySettings = function() {
      * Storage for deactivated values
      */
     this._deactivated = {};
+    
+    this._settings = {};
+    
+    /**
+     * Event that tells people when a setting has changed.
+     */
+    this.settingChange = new Event({
+        keyElement: 0
+    });
+
 };
 
 exports.MemorySettings.prototype = {
@@ -281,7 +258,7 @@ exports.MemorySettings.prototype = {
      * validation.
      */
     set: function(key, value) {
-        var settingExt = settings[key];
+        var settingExt = this._settings[key];
         if (!settingExt) {
             // If there is no definition for this setting, then warn the user
             // and store the setting in raw format. If the setting gets defined,
@@ -301,7 +278,7 @@ exports.MemorySettings.prototype = {
                 this._values[key] = converted;
 
                 // Inform subscriptions of the change
-                exports.settingChange(key, converted);
+                this.settingChange(key, converted);
                 
             } catch (ex) {
                 console.error('Error setting', key, ': ', ex);
@@ -334,7 +311,7 @@ exports.MemorySettings.prototype = {
         if (!settingExt.defaultValue === undefined) {
             console.error('Setting.defaultValue == undefined', settingExt);
         }
-
+        
         var valid = types.isValid(settingExt.defaultValue, settingExt.type);
         try {
             if (!valid) {
@@ -348,13 +325,23 @@ exports.MemorySettings.prototype = {
             var value = this._deactivated[settingExt.name] ||
                     settingExt.defaultValue;
 
+            this._settings[settingExt.name] = settingExt;
+            
             // Set the default value up.
             this.set(settingExt.name, value);
         } catch (ex) {
             console.error('Type error ', ex, ' ignoring setting ', settingExt);
         }
     },
-
+    
+    removeSetting: function(name) {
+        delete this._settings[name];
+    },
+    
+    getSettingNames: function() {
+        return Object.keys(settings);
+    },
+    
     /**
      * Reset the value of the <code>key</code> setting to it's default
      */
@@ -368,7 +355,7 @@ exports.MemorySettings.prototype = {
     },
 
     resetAll: function() {
-        exports.getSettingNames().forEach(function(key) {
+        this.getSettingNames().forEach(function(key) {
             this.resetValue(key);
         }.bind(this));
     },
@@ -378,7 +365,7 @@ exports.MemorySettings.prototype = {
      */
     _list: function() {
         var reply = [];
-        exports.getSettingNames().forEach(function(setting) {
+        this.getSettingNames().forEach(function(setting) {
             reply.push({
                 'key': setting,
                 'value': this.get(setting)
@@ -461,7 +448,7 @@ exports.MemorySettings.prototype = {
         var promises = [];
         var reply = {};
 
-        exports.getSettingNames().forEach(function(key) {
+        this.getSettingNames().forEach(function(key) {
             var value = this.get(key);
             var settingExt = exports.getSetting(key);
             if (settingExt) {
@@ -478,7 +465,7 @@ exports.MemorySettings.prototype = {
      */
     _defaultValues: function() {
         var defaultValues = {};
-        exports.getSettingNames.forEach(function(settingName) {
+        this.getSettingNames.forEach(function(settingName) {
             var settingExt = exports.getSetting(settingName);
             defaultValues[settingExt.name] = settingExt.defaultValue;
         });
diff --git a/plugins/undomanager/lib/index.js b/plugins/undomanager/lib/index.js
index de17357..b4a6228 100644
--- a/plugins/undomanager/lib/index.js
+++ b/plugins/undomanager/lib/index.js
@@ -38,9 +38,9 @@
 define(function(require, exports, module) {
     
 var util = require("util/util");
-var canon = require('canon');
 
 exports.startup = function(data, reason) {
+    var canon = data.env.canon;
     canon.addCommand({
         "name": "redo",
         "key": [ "ctrl_shift_z" ],
@@ -54,6 +54,7 @@ exports.startup = function(data, reason) {
 };
 
 exports.shutdown = function(data, reason) {
+    var canon = data.env.canon;
     canon.removeCommand('redo');
     canon.removeCommand('undo');
 };
diff --git a/plugins/worker_manager.js b/plugins/worker_manager.js
index d02827b..71861cc 100644
--- a/plugins/worker_manager.js
+++ b/plugins/worker_manager.js
@@ -49,7 +49,6 @@ define(function(require, exports, module) {
 });
 "end";
 
-var canon = require('canon');
 var _ = require('underscore')._;
 var Event = require('events').Event;
 var Promise = require('util/promise').Promise;
@@ -57,6 +56,7 @@ var proxy = require('util/proxy');
 var console = require('util/console');
 
 exports.startup = function(data, reason) {
+    var canon = data.env.canon;
     canon.addCommand({
         "name": "worker",
         "description": "Low-level web worker control (for plugin development)"
@@ -69,6 +69,7 @@ exports.startup = function(data, reason) {
 };
 
 exports.shutdown = function(data, reason) {
+    var canon = data.env.canon;
     canon.removeCommand("worker restart");
     canon.removeCommand("worker");
 };
