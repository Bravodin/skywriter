commit 9ba5450ad7472ebba9fa63e63bb96384f8cfb5d5
Author: Kevin Dangoor <kid@blazingthings.com>
Date:   Mon Nov 8 08:54:55 2010 -0500

    add editor.html demo from ACE repo. add missing html_highlight_rules

diff --git a/editor.html b/editor.html
new file mode 100644
index 0000000..2d5c4b4
--- /dev/null
+++ b/editor.html
@@ -0,0 +1,298 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
+   "http://www.w3.org/TR/html4/strict.dtd">
+
+<html lang="en">
+<head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+    <title>Editor</title>
+    <meta name="author" content="Fabian Jakobs">
+    
+    <style type="text/css" media="screen">
+    
+    html {
+        height: 100%;
+        overflow: hidden;
+    }
+    
+    body {
+        overflow: hidden;
+        margin: 0;
+        padding: 0;
+        font: sans-serif;
+        height: 100%;
+        width: 100%;
+        font-family: Arial, Helvetica, sans-serif, Tahoma, Verdana;
+        font-size: 12px;
+        background: rgb(14, 98, 165);
+        color: white;
+    }
+    
+    #editor {  
+        top: 55px;
+        left: 0px;
+        background: white;
+    }
+    
+    #controls {
+        width: 100%;
+        height: 55px;
+    }
+  
+    #jump {
+        position: absolute;
+        width: 10px;
+        height: 10px;
+        border: 1px solid red;
+        z-index: 10000;
+        display: none;
+    }
+    
+    </style>
+    <script src="scripts/require.js" type="text/javascript" charset="utf-8"></script>
+</head>
+<body>
+    <div id="jump"></div>
+    
+    <table id="controls">
+      <tr>
+        <td>
+        <label for="doc">Document:</label>
+        <select id="doc" size="1">
+          <option value="js">JS Document</option>
+          <option value="html">HTML Document</option>
+          <option value="css">CSS Document</option>
+        </select>
+      </td>
+      <td>
+        <label for="mode">Mode:</label>
+        <select id="mode" size="1">
+          <option value="text">Plain Text</option>
+          <option value="javascript">JavaScript</option>
+          <option value="xml">XML</option>
+          <option value="html">HTML</option>
+          <option value="css">CSS</option>
+        </select>
+      </td>
+      <td>
+        <label for="theme">Theme:</label>
+        <select id="theme" size="1">
+          <option value="ace/theme/TextMate">TextMate</option>
+          <option value="ace/theme/Eclipse">Eclipse</option>
+          <option value="ace/theme/Dawn">Dawn</option>
+          <option value="ace/theme/IdleFingers">idleFingers</option>
+          <option value="ace/theme/Twilight">Twilight</option>
+        </select>
+      </td>
+      <td>
+        <label for="select_style">Full line selections</label>
+        <input type="checkbox" name="select_style" id="select_style" checked>        
+      </td>
+      <td>
+        <label for="highlight_active">Highlight active line</label>
+        <input type="checkbox" name="highlight_active" id="highlight_active" checked>        
+      </td>
+      <td align="right">
+        <img src="logo.png">        
+      </td>
+      </tr>
+    </table>
+
+    <div id="editor">    
+    </div>
+    
+    <script type="text/editor" id="jstext">function foo(items) {
+    for (var i=0; i<items.length; i++) {
+        alert(items[i] + "juhu");
+    }
+}</script>
+
+    <script type="text/editor" id="csstext">.text-layer {
+    font-family: Monaco, "Courier New", monospace;
+    font-size: 12px;
+    cursor: text;
+}
+    </script>
+
+    <script type="text/editor" id="htmltext"><html>
+<head>
+
+<style type="text/css">
+.text-layer {
+    font-family: Monaco, "Courier New", monospace;
+    font-size: 12px;
+    cursor: text;
+}
+</style>
+
+</head>
+<body>
+    <h1 style="color:red">Juhu Kinners</h1>
+</body>
+</html>
+    </script>
+    
+<script type="text/javascript" charset="utf-8">
+
+require(
+    {baseUrl: "../plugins/ace/lib"},
+    [
+        "ace/lib/event",
+        "ace/editor",
+        "ace/virtual_renderer",
+        "ace/theme/textmate",
+        "ace/document",
+        "ace/mode/javascript",
+        "ace/mode/css",
+        "ace/mode/html",
+        "ace/mode/xml",
+        "ace/mode/text",
+        "ace/undomanager"
+    ], function(event, Editor, Renderer, theme, Document, JavaScriptMode, CssMode, HtmlMode, XmlMode, TextMode, UndoManager) { 
+
+var docs = {}
+
+docs.js = new Document(document.getElementById("jstext").innerHTML);
+docs.js.setMode(new JavaScriptMode());
+docs.js.setUndoManager(new UndoManager());
+
+docs.css = new Document(document.getElementById("csstext").innerHTML);
+docs.css.setMode(new CssMode());
+docs.css.setUndoManager(new UndoManager());
+
+docs.html = new Document(document.getElementById("htmltext").innerHTML);
+docs.html.setMode(new HtmlMode());
+docs.html.setUndoManager(new UndoManager());
+
+var docEl = document.getElementById("doc");
+
+function onDocChange() {
+    var doc = getDoc();
+    editor.setDocument(doc);
+    
+    var mode = doc.getMode();
+    if (mode instanceof JavaScriptMode) {
+        modeEl.value = "javascript"
+    }
+    else if (mode instanceof CssMode) {
+        modeEl.value = "css"
+    }
+    else if (mode instanceof HtmlMode) {
+        modeEl.value = "html"
+    }
+    else if (mode instanceof XmlMode) {
+        modeEl.value = "xml"
+    }
+    else {
+        modeEl.value = "text"
+    }
+    
+    editor.focus();
+}
+docEl.onchange = onDocChange;
+
+function getDoc() {
+    return docs[docEl.value];
+}
+
+var modeEl = document.getElementById("mode");
+modeEl.onchange = function() {
+    editor.getDocument().setMode(modes[modeEl.value] || modes.text);
+};
+
+var modes = {
+    text: new TextMode(),
+    xml: new XmlMode(),
+    html: new HtmlMode(),
+    css: new CssMode(),
+    javascript: new JavaScriptMode()
+};
+
+function getMode() {
+    return modes[modeEl.value]; 
+}
+
+var themeEl = document.getElementById("theme");
+themeEl.onchange = function() {
+    editor.setTheme(themeEl.value);
+};
+
+var selectEl = document.getElementById("select_style");
+selectEl.onchange = function() {
+    if (selectEl.checked) {
+        editor.setSelectionStyle("line");
+    } else {
+        editor.setSelectionStyle("text");
+    }
+};
+
+var activeEl = document.getElementById("highlight_active");
+activeEl.onchange = function() {
+    editor.setHighlightActiveLine(!!activeEl.checked);
+};
+
+var container = document.getElementById("editor");
+var editor = new Editor(new Renderer(container, theme));
+onDocChange();
+
+window.jump = function() {
+    var jump = document.getElementById("jump")
+    var cursor = editor.getCursorPosition()
+    var pos = editor.renderer.textToScreenCoordinates(cursor.row, cursor.column);
+    jump.style.left = pos.pageX + "px";
+    jump.style.top = pos.pageY + "px";
+    jump.style.display = "block";
+}
+
+function onResize() {
+    container.style.width = (document.documentElement.clientWidth - 4) + "px";
+    container.style.height = (document.documentElement.clientHeight - 55 - 4) + "px";     
+    editor.resize();    
+};
+
+window.onresize = onResize;
+onResize();
+
+event.addListener(container, "dragover", function(e) {
+    return event.preventDefault(e);
+});
+
+event.addListener(container, "drop", function(e) {
+    try {
+        var file = e.dataTransfer.files[0];
+    } catch(e) {
+        return event.stopEvent();
+    }
+    
+    if (window.FileReader) {
+        var reader = new FileReader();
+        reader.onload = function(e) {
+            editor.getSelection().selectAll();
+            
+            var mode = "text";
+            if (/^.*\.js$/i.test(file.name)) {
+                mode = "javascript";
+            } else if (/^.*\.xml$/i.test(file.name)) {
+                mode = "xml";
+            } else if (/^.*\.html$/i.test(file.name)) {
+                mode = "html";
+            } else if (/^.*\.css$/i.test(file.name)) {
+                mode = "css";
+            }
+            
+            editor.onTextInput(reader.result);
+            
+            modeEl.value = mode;      
+            editor.getDocument().setMode(modes[mode]);
+        }
+        reader.readAsText(file);
+    }
+    
+    return event.preventDefault(e);
+});
+
+
+});
+</script>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/plugins/ace/lib/ace/mode/html_highlight_rules.js b/plugins/ace/lib/ace/mode/html_highlight_rules.js
new file mode 100644
index 0000000..63eae02
--- /dev/null
+++ b/plugins/ace/lib/ace/mode/html_highlight_rules.js
@@ -0,0 +1,182 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Ajax.org Code Editor (ACE).
+ *
+ * The Initial Developer of the Original Code is
+ * Ajax.org Services B.V.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *      Fabian Jakobs <fabian AT ajax DOT org>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+define(function(require, exports, module) {
+
+var oop = require("ace/lib/oop");
+var CssHighlightRules = require("ace/mode/css_highlight_rules");
+var JavaScriptHighlightRules = require("ace/mode/javascript_highlight_rules");
+var TextHighlightRules = require("ace/mode/text_highlight_rules");
+
+var HtmlHighlightRules = function() {
+
+    // regexp must not have capturing parentheses
+    // regexps are ordered -> the first match is used
+
+    this.$rules = {
+        start : [ {
+            token : "text",
+            regex : "<\!\[CDATA\[",
+            next : "cdata"
+        }, {
+            token : "xml_pe",
+            regex : "<\?.*?\?>"
+        }, {
+            token : "comment",
+            regex : "<\!--",
+            next : "comment"
+        }, {
+            token : "text",
+            regex : "<(?=\s*script)",
+            next : "script"
+        }, {
+            token : "text",
+            regex : "<(?=\s*style)",
+            next : "css"
+        }, {
+            token : "text", // opening tag
+            regex : "<\/?",
+            next : "tag"
+        }, {
+            token : "text",
+            regex : "\s+"
+        }, {
+            token : "text",
+            regex : "[^<]+"
+        } ],
+
+        script : [ {
+            token : "text",
+            regex : ">",
+            next : "js-start"
+        }, {
+            token : "keyword",
+            regex : "[-_a-zA-Z0-9:]+"
+        }, {
+            token : "text",
+            regex : "\s+"
+        }, {
+            token : "string",
+            regex : '".*?"'
+        }, {
+            token : "string",
+            regex : "'.*?'"
+        } ],
+
+        css : [ {
+            token : "text",
+            regex : ">",
+            next : "css-start"
+        }, {
+            token : "keyword",
+            regex : "[-_a-zA-Z0-9:]+"
+        }, {
+            token : "text",
+            regex : "\s+"
+        }, {
+            token : "string",
+            regex : '".*?"'
+        }, {
+            token : "string",
+            regex : "'.*?'"
+        } ],
+
+        tag : [ {
+            token : "text",
+            regex : ">",
+            next : "start"
+        }, {
+            token : "keyword",
+            regex : "[-_a-zA-Z0-9:]+"
+        }, {
+            token : "text",
+            regex : "\s+"
+        }, {
+            token : "string",
+            regex : '".*?"'
+        }, {
+            token : "string",
+            regex : "'.*?'"
+        } ],
+
+        cdata : [ {
+            token : "text",
+            regex : "\]\]>",
+            next : "start"
+        }, {
+            token : "text",
+            regex : "\s+"
+        }, {
+            token : "text",
+            regex : ".+"
+        } ],
+
+        comment : [ {
+            token : "comment",
+            regex : ".*?-->",
+            next : "start"
+        }, {
+            token : "comment",
+            regex : ".+"
+        } ]
+    };
+
+    var jsRules = new JavaScriptHighlightRules().getRules();
+    this.addRules(jsRules, "js-");
+    this.$rules["js-start"].unshift({
+        token: "comment",
+        regex: "\/\/.*(?=<\/script>)",
+        next: "tag"
+    }, {
+        token: "text",
+        regex: "<\/(?=script)",
+        next: "tag"
+    });
+
+    var cssRules = new CssHighlightRules().getRules();
+    this.addRules(cssRules, "css-");
+    this.$rules["css-start"].unshift({
+        token: "text",
+        regex: "<\/(?=style)",
+        next: "tag"
+    });
+};
+
+oop.inherits(HtmlHighlightRules, TextHighlightRules);
+
+return HtmlHighlightRules;
+});
